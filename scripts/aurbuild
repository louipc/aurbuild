#!/usr/bin/python
#
#   aurbuild
#
#   Copyright (C) 2005-2007 by Tyler Gates <TGates81@gmail.com>
#   Copyright (C) 2008-2009 by Loui Chang <louipc.ist@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License version 2
#   as published by the Free Software Foundation.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

import getopt
import glob
import os
import signal
import sys
import tarfile
import time
import urllib.request, urllib.parse, urllib.error

from shutil import rmtree, copytree, copy
from subprocess import Popen

import aurbuild.pacman
import aurbuild.vercmp
import aurbuild.find
import aurbuild.aurparse
import aurbuild.execute
import aurbuild.utils

# globals
PROGRAM_VERSION = '1.8.10'
PROGRAM_NAME = os.path.basename(sys.argv[0])
AUTHORS = 'Tyler Gates, Loui Chang'
PAGER = 'less'

install_app = 'pacman'
build_app = "makepkg"

apacman = aurbuild.pacman
avercmp = aurbuild.vercmp
afind = aurbuild.find
aaurparse = aurbuild.aurparse
aexec = aurbuild.execute
autils = aurbuild.utils

# pacman stuff
pacman_config = '/etc/pacman.conf'
pm_db_root = '/var/lib/pacman'
pacman_db_lock = pm_db_root + '/db.lck'
installed_dir = pm_db_root + '/local'
pm_cache = '/var/cache/pacman'

# makepkg stuff
makepkg_config = '/etc/makepkg.conf'
PKGEXT = '.pkg.tar*'

# Environment stuff
uid = os.getuid()
gid = os.getgid()
editor = None
default_editor = 'less'

# ABS
ABS_ROOT = '/var/abs'

# AUR stuff
aursite = 'http://aur.archlinux.org/'

# aurbuild stuff
aurbuild_home = '/var/tmp/aurbuild'
build_dir = os.path.join(aurbuild_home, 'build')
save_dir = os.path.join(aurbuild_home, 'pkgbuilds')
cookiefile = os.getenv('HOME') + '/.aurbuild/aurcookie.lwp'

# Populate these later.
builduser_uid = None
builduser_gid = None
working_pkg = None

# this will be build_dir/working_pkg
pkg_build_dir = 'dummy'
aur_tarfile = 'dummy'

# for filter_deps
filtered = []
db_pkgs = []
db_paths = []

# Option variables.
VERSION = 0
VERBOSE = 0
BUILDDEPS = 0
SYNCDEPS = 0
BUILDER_OPTS = 0
SAVE = 0
LOCAL = 0
OFFICIAL = 0
AUTO_BUILD = 0
UPGRADE = 0
NOCONFIRM = 0
NOINSTALL = 0
CLEAN = 0
SEARCH = 0
VOTE = 0
UNVOTE = 0
RM_MDEPS = 0
BUILDER_OPTARGS = ''
OFFICIAL_PATH = ABS_ROOT

def cleanup():
	if os.path.isdir(pkg_build_dir):
		rmtree(pkg_build_dir)
	if aur_tarfile != None:
		if os.path.isfile(aur_tarfile):
			os.remove(aur_tarfile)

def handler(signo, frame):
	if signo == 2:
		cleanup()
		sys.exit(130)
	elif signo == 15:
		cleanup()
		sys.exit(143)

def usage(name):
	print('Usage: %s [options] [package] <package>' % name)
	print('')
	print('Options:')
	print('  -b, --builddeps       Build and install missing ' \
					'dependencies from ABS')
	print('  -s, --syncdeps        Install missing dependencies with pacman')
	print('')
	print('  -c  --clean           Clean the build directory')
	print('  -e, --save            Save build files in %s' % save_dir)
	print('  -f, --official        Build official packages found in %s' % ABS_ROOT)
	print('  -h, --help            Show this help message and exit')
	print('  -l, --local           Use build files found in %s' % save_dir)
	print('  --auto                Bypass menu and build ' \
					'automatically (DANGEROUS)')
	print('  -m, --rm-make-deps    Remove uneeded make dependencies')
	print('  -n, --noconfirm       Bypass any confirmation messages ' \
					'by answering yes')
	print('  --nopager             Do not pipe output to less')
	print('  -o "OPTS", --builder-opts="OPTS"')
	print('                        Pass OPTS to makepkg during build')
	print('  -u, --upgrade         Upgrade all packages installed ' \
					'from unsupported AUR')
	print('  -v, --version         Display version and exit')
	print('  -x, --noinstall       Do not install package after building')
	print('  -S, --search          Search AUR for single [keyword]')
	print('  --verbose             Verbose search output')
#	print('  -V, --vote            Vote for a package')
#	print('  -U, --unvote          Unvote for a package')

# examine makepkg.conf and set more globals
if os.access(makepkg_config, os.F_OK|os.R_OK):
	try:
		BUILDENV = autils.echo_bash_vars(makepkg_config,
			'${BUILDENV[@]}')
	except Exception as e:
		print(str(e), file=sys.stderr)
		sys.exit(1)

	valid_buildenv = []
	for var in BUILDENV:
		if var[0] != '!':
			valid_buildenv.append(var)

	if 'color' in valid_buildenv: USE_COLOR = 'y'
	else: USE_COLOR = 'n'

	if 'fakeroot' in valid_buildenv: USE_FAKEROOT = 'y'
	else: USE_FAKEROOT = 'n'

	out = autils.echo_bash_vars(makepkg_config, '$PKGDEST:$SRCDEST:$CARCH')
	out = out.split(':')

	PKGDEST = out[0]
	SRCDEST = out[1]
	CARCH = out[2]
	del(out)
else:
	print('Error: %s is missing or read permissions are denied.' % makepkg_config, file=sys.stderr)
	sys.exit(1)

signal.signal(signal.SIGINT, handler)
signal.signal(signal.SIGTERM, handler)

try:
	opts, args = getopt.getopt(sys.argv[1:], 'hvbso:elfunxmcS',
		['help', 'version', 'verbose', 'builddeps', 'syncdeps',
		'builder-opts=',
		'save', 'local', 'official', 'auto', 'auto-build', 'upgrade',
		'noconfirm', 'noinstall', 'nopager', 'rm-make-deps', 'clean',
		'search', 'url='])
except getopt.GetoptError as e:
	usage(PROGRAM_NAME)
	print('Error: ' + str(e))
	sys.exit(1)

for opt, optarg in opts:
	if opt in ['-h', '--help']: usage(PROGRAM_NAME); sys.exit(0)
	if opt in ['-v', '--version']: VERSION = 1
	if opt in ['--verbose']: VERBOSE = 1
	if opt in ['-b', '--builddeps']: BUILDDEPS = 1
	if opt in ['-s', '--syncdeps']: SYNCDEPS = 1
	if opt in ['-o', '--builder-opts']:
		BUILDER_OPTS = 1
		BUILDER_OPTARGS = optarg
	if opt in ['-e', '--save']: SAVE = 1
	if opt in ['-l', '--local']: LOCAL = 1
	if opt in ['-f', '--official']: OFFICIAL = 1
	if opt in ['--auto', '--auto-build']: AUTO_BUILD = 1
	if opt in ['-u', '--upgrade']: UPGRADE =1
	if opt in ['-n', '--noconfirm']: NOCONFIRM = 1
	if opt in ['-x', '--noinstall']: NOINSTALL = 1
	if opt in ['--nopager']: PAGER = None
	if opt in ['-m', '--rm-make-deps' ]: RM_MDEPS = 1
	if opt in ['-c', '--clean' ]: CLEAN = 1
	if opt in ['-S', '--search']: SEARCH = 1
	if opt in ['--url']:
		aursite = optarg + '/'
#	if opt in ['-V', '--vote']: VOTE = 1
#	if opt in ['-U', '--unvote']: UNVOTE = 1

def version():
	print('%s v%s' % (PROGRAM_NAME, PROGRAM_VERSION))
	print('Copyright (C) 2005-2010 %s' % AUTHORS)
	print('')
	print('This program may be freely redistributed under')
	print('the terms of the GNU General Public License version 2')

# Check for problems with options, arguments and other input.
def verify_inputs():

	# Must have an option.
	if len(opts) == 0:
		usage(PROGRAM_NAME)
		return 1

	# Must have an arg unless --upgrade or --clean are specified.
	if (len(args) == 0) and (not UPGRADE and not CLEAN):
		print(PROGRAM_NAME + ': no target specified')
		return 1

	# --builddeps and --syncdeps can't be used together
	if BUILDDEPS and SYNCDEPS:
		print(PROGRAM_NAME + ': -b, --builddeps and ' \
			'-s, --syncdeps cannot be used together')
		return 1

	# --local, --official, --auto-build, and --upgrade must be used
	# with a dependency install method.
	if LOCAL or OFFICIAL or AUTO_BUILD or UPGRADE:
		if not BUILDDEPS and not SYNCDEPS:
			print(PROGRAM_NAME + ': this switch requires either ' \
				'-b, --builddeps or -s, --syncdeps')
			return 1

	# --vote and --unvote can't be used together.
	if VOTE and UNVOTE:
		print(PROGRAM_NAME + ': -V, --vote and ' \
			'-U, --unvote cannot be used together')
		return 1

def color(text, color_alias):
	if USE_COLOR == 'y':
		return autils.color(text, color_alias)
	else:
		return text

def msg(text):
	return color('==> ', 'green') + color(text, 'white')

def prepare_work_dirs():
	try:
		cleanup()
	# parent directory of aurbuild_home should exist and owned by root
		if not os.path.isdir(os.path.dirname(aurbuild_home)):
			os.makedirs(os.path.dirname(aurbuild_home))

		# aurbuild_home should be aurbuild:aurbuild with 0775
		if not os.path.isdir(aurbuild_home):
			os.mkdir(aurbuild_home)
			os.chmod(aurbuild_home, 0o775)
			os.chown(aurbuild_home, builduser_uid, builduser_uid)

		# build_dir should be the same as aurbuild_home
		if not os.path.isdir(build_dir):
			os.mkdir(build_dir)
			os.chmod(build_dir, 0o775)
			os.chown(build_dir, builduser_uid, builduser_uid)

		# pkg_build_dir should be created by the builduser
		autils.user_makedirs(pkg_build_dir, builduser_uid, builduser_uid)
	except Exception as e:
		print('\ncould not prepare for build: %s\n' % str(e), file=sys.stderr)
		sys.exit(1)


def get_tarball(pkg):

	try:
		tarball_url = aaurparse.pkg_tarball_url(pkg, aursite)
	except Exception as e:
		raise Exception('Unable to parse tarball info. If '
			'you see this message rarely, it is\n'
			'possible user comments have skewed the parsing '
			'results on the web page.\n')

	if not tarball_url:
		print('%s: not found at %s' % (pkg, aursite), file=sys.stderr)
		return

	try:
		tar = urllib.request.urlretrieve(tarball_url)[0]
		return tar
	except IOError as e:
		raise Exception('Could not retrieve needed data from:'
			'\n\t%s\n%s' % (aursite, str(e)))

def extract(file):
	extract_dir = pkg_build_dir
	# split off the extension at `.'. Up to two allowed
	file_extension = file.rsplit('.', 2)[1:]
	if 'gz' in file_extension: ext = 'gz'
	elif 'tgz' in file_extension: ext = 'gz'
	elif 'bz2' in file_extension: ext = 'bz2'
	else:
		if os.path.exists(file): os.remove(file)
		raise Exception('%s: unsupported compression. Cannot extract.' % file)

	try:
		if os.path.isdir(extract_dir): rmtree(extract_dir)
		os.mkdir(extract_dir)
		os.chmod(extract_dir, 0o775)
		os.chown(extract_dir, builduser_uid, builduser_gid)
	except Exception as e:
		raise Exception('could not create temporary extraction point: %s' % str(e))

	try:
		tar_f = tarfile.open(file, 'r:*')
		for member in tar_f.getmembers():
			tar_f.extract(member, extract_dir)
	except tarfile.TarError as e:
		if os.path.exists(file): os.remove(file)
		raise Exception('Could not extract tarfile: %s\n' % str(e))

	# The parent directory of the extracted tarball has a setgroup
	# id bit set from AUR. This needs to be removed.
	for j in os.listdir(extract_dir):
		jf = os.path.join(extract_dir, j)
		if os.path.isdir(jf):
			os.chmod(jf, 0o755)

	# AUR gives us fucked tarballs with nobody:nobody ownership.
	# This will fix it.
	autils.own_dir(extract_dir, builduser_uid, builduser_gid)

	tar_f.close()
	os.remove(file)


def filter_deps(pkg, fd_ct, type):
	"""
	Resolve and print dependencies. Return a list of missing dependencies.

	pkg is the package for which the dependencies shall be resolved.
	type is either a makedepends, depends, or optdepends.
	"""

	GROUPCHECK = False

	# for tabbing over tree branch symbols
	pre_space  = 3
	# spaces must be greater than pre_space
	spaces = 3
	v = fd_ct / spaces
	indents = ' ' * pre_space + ('|' + ' ' * spaces) * v
	sys.stdout.write(color(indents + '- ', 'blue') + \
		color(pkg + ': ', 'black'))

	sys.stdout.flush()
	code = apacman.operations().pacmanT(pkg)

	if code == 127:
		group_pkgs = []

		# See if it's a group name
		if GROUPCHECK:
			print("Checking for group: ", end=' ')
			group_pkgs = apacman.db_tools().get_group(pkg)

		if group_pkgs == []:
			print(color('missing ' + type, 'red'))
			pkg = apacman.db_tools().strip_ver_cmps(pkg)[0]

			if BUILDDEPS:
				dep_path = autils.get_dep_path(ABS_ROOT, pkg)
				# a dependency is found, check it's deps and run this method again
				mdep_cans, dep_cans = autils.get_depends(
					'%s/PKGBUILD' % dep_path,
					'makedepends',
					'depends')

				if mdep_cans or dep_cans != ['']: fd_ct += spaces

				if mdep_cans != ['']:
					for mdep_can in mdep_cans:
						filter_deps(mdep_can, fd_ct, type='[M]')

				if dep_cans != ['']:
					for dep_can in dep_cans:
						filter_deps(dep_can, fd_ct, type='[D]')

			elif SYNCDEPS:
				# follows steps of BUILDDEPS omitting make dependencies
				if db_paths == []:
					# generate list to global
					db_paths.extend(apacman.db_tools().get_db_pkgpaths())
				if db_pkgs == []:
					# generate list to global
					for db_path in db_paths:
						descfile = db_path + '/desc'
						if os.path.isfile(descfile):
							db_pkg = apacman.db_tools().get_db_info(descfile, '%NAME%')[0]
							if db_pkg != []: db_pkgs.append(db_pkg)
				found = 0
				for db_pkg in db_pkgs:
					db_path = db_paths[db_pkgs.index(db_pkg)]
					if db_pkg != [] and pkg == db_pkg:
						found = 1
						dependsfile = db_path + '/depends'
						dep_cans = apacman.db_tools().get_db_info(dependsfile, '%DEPENDS%')
						if dep_cans != []:
							fd_ct += spaces
							for dep_can in dep_cans:
								filter_deps(dep_can, fd_ct, type='[D]')
				if not found:
					# Look in AUR for dependency.
					print('\tNot found in database.')
					return filtered

			# there must be no remaining deps of deps, add to list
			if not pkg in filtered: filtered.append(pkg)
		else:
			print(color('group', 'cyan'))
			fd_ct += 4
			for group_pkg in group_pkgs:
				filter_deps(group_pkg, fd_ct, type='[D]')
	elif code == 0:
		print(color('ok ' + type, 'green'))

	elif code != 127 and code != 0:
		raise Exception('aurbuild: fatal error while testing dependencies.\n')

	return filtered


def src_to_pm_cache(sources):
	"""Copy the source files to pacman cache."""

	cwd = os.getcwd()
	if SRCDEST == '':
		_SRCDEST = os.path.join(pm_cache, 'src')
	else:
		_SRCDEST = SRCDEST
	for source in sources:
		source_file = source.split('/')[-1]
		try:
			source_file = os.path.join(cwd, 'src', source_file)
			copy(source_file, _SRCDEST)
		except:
			pass

def get_pkgpath():
	"""Get the built package path."""

	cwd = os.getcwd()
	if PKGDEST == '':
		_PKGDEST = cwd
	else:
		_PKGDEST = PKGDEST

	try:
		out = autils.echo_bash_vars(os.path.join(cwd, 'PKGBUILD'),
			'${pkgname}%${pkgver}%${pkgrel}')

	except Exception as e:
		print('PKGBUILD syntax error: '+ str(e), file=sys.stderr)
		sys.exit(1)

	arch = autils.echo_bash_vars(os.path.join(cwd,'PKGBUILD'), "${arch}")

	# Make sure we can install packages built for 'any' arch
	if arch != 'any':
		arch = CARCH

	out = out.split('%')
	pkgname, pkgver, pkgrel = out[0], out[1], out[2]

	pkgpath = os.path.join(_PKGDEST, pkgname + '-' + pkgver +
			'-' + pkgrel + '-' + arch + PKGEXT)
	pkgfile = glob.glob(pkgpath)

	if pkgfile:
		return pkgfile[0]
	else:
		print('Error: could not find the built '
			'package in %s' % pkgpath, file=sys.stderr)
		print('In some cases this might mean the '
			'PKGDEST location does not have write and execute '
			'permissions\nfor the aurbuild user or group.',
			file=sys.stderr)
		sys.exit(1)


def makepkgf(dep):

	cwd = os.getcwd()

	try:
		raw_sources = autils.echo_bash_vars(os.path.join(cwd, 'PKGBUILD'), '${source[@]}')
	except Exception as e:
		print(str(e), file=sys.stderr)
		sys.exit(1)

	app = build_app
	args = [app, '-f']
	if BUILDER_OPTS and BUILDER_OPTARGS != '':
		args.extend(BUILDER_OPTARGS.split(' '))

	# ccache needs a writable HOME, set it here.
	env = os.environ
	env['HOME'] = aurbuild_home
	code = aexec.child_spawn(app, args, builduser_uid, builduser_gid, env)

	# Copy src files over to cache.
	# src_to_pm_cache(raw_sources)

	if code > 0:
		print('aurbuild: could not build %s '
			'with %s.' % (dep, app), file=sys.stderr)
		print('Build directory retained at %s' % pkg_build_dir)
		print('You can visit the directory, fix the ' \
		'problem, and run %s.' % app)
		sys.exit(3)

	return get_pkgpath()

def install(pkgpath, asdeps=False):
	"""
	Install the specified package via pacman.

	If asdeps is True, then install the package as a dependency.
	"""

	if os.path.isfile(pacman_db_lock):
		print('Pacman is detected running.')
		print('Once pacman exits, you may press enter to install')
		print('Control + C to cancel.')
		input()

	print(msg('Installing package...'))

	if not asdeps:
		code = Popen(['pacman', '-U', pkgpath]).wait()
	else:
		code = Popen(['pacman', '-U', '--asdeps', pkgpath]).wait()

	if code > 0:
		raise Exception('aurbuild could not install '
				'package via pacman --upgrade.')

def builddeps(deplist):
	# for -b option
	cwd = os.getcwd()
	for each in deplist:
		dep_path = autils.get_dep_path(ABS_ROOT, each)

		des_dir = os.path.join(build_dir, each)
		os.setegid(builduser_gid)
		os.seteuid(builduser_uid)

		# Remove build directory if it already exists
		if os.path.isdir(des_dir):
			rmtree(des_dir)

		copytree(dep_path, des_dir)
		os.seteuid(uid)
		os.setegid(gid)
		os.chdir(des_dir)
		pkgpath = makepkgf(each)
		if not NOINSTALL:
			install(pkgpath, asdeps=True)

	os.chdir(cwd)

def menu(dir_list, package):
	global editor

	files = []
	messages = ''

	if not editor:
		try:
			get_editor()
		except Exception as e:
			messages += str(e) + "\n"

	editor_cmd = editor
	columns = 80
	sep_num = 51
	seperator = '-' * sep_num
	space_num = (columns - sep_num ) / 2
	spaces = ' ' * space_num

	for each in dir_list:
		if os.path.isfile(each):
			files.append(each)
	del(each)
	file_num = len(files)

	if not NOINSTALL:
		# open editor with .install file
		for k in files:
			extension = k.rsplit('.', 1)[1:]
			if 'install' in extension:
				editor_cmd.append(k)
				code = Popen(editor_cmd).wait()
				editor_cmd.remove(k)
				break

	def title(display, _color):
		len_disp = int(len(display))
		if len_disp > sep_num: centerspaces = ''
		else: centerspaces = ' ' * ((sep_num - len_disp) / 2)
		return spaces + centerspaces + color(display, _color)

	getout = False
	while not getout:
		default_choice = 'b'
		code = Popen('clear').wait()
		print(color(messages, 'red'))
		print(title(package, 'white'))
		print('\n' + spaces + seperator)

		i = 0
		while i < file_num:
			print('%s  %s) View/Edit %s' % (spaces, str(i + 1), files[i]))
			i = i + 1
		print(spaces + seperator)

		menu_op = "Build with %s" % build_app

		if not NOINSTALL:
			menu_op += " and install with %s" % install_app

		# Build (and install) with makepkg (and pacman)
		print(spaces + color('*', 'blue') + ' b)  %s.'% menu_op)
		default_choice = 'b'

		print(spaces + '  s)  Save build files and build.')
		print(spaces + '  n)  Next package. Skip this package.')
		print(spaces + '  q)  Quit without building.')
		print(spaces + seperator)

		warnings = autils.scan_pkgbuild('PKGBUILD')
		for warn in warnings:
			print(spaces + color(warn, 'red'))

		display_choice = default_choice.upper()
		choice = input('\n%sEnter a selection: [%s] ' % (spaces, display_choice))

		if choice == '':
			return default_choice
		elif choice in ('b', 'n', 's', 'v'):
			return choice
		elif choice == 'q':
			sys.exit(0)
		elif (choice.isdigit() and
			int(choice) >= 1 and
			int(choice) <= file_num):
				editor_cmd.append(files[int(choice)-1])
				code = Popen(editor_cmd).wait()
				editor_cmd.remove(files[int(choice)-1])
		else:
			print('\n%s%s: Invalid entry.' % (spaces, choice))
			print(spaces + 'Press enter to choose again.')
			input(spaces)

def init():
	# check that we have everything we need
	prog_list = ['makepkg', 'pacman', 'fakeroot']
	for prog in prog_list:
		if not autils.appcheck(prog):
			print('%s program not found in $PATH.' % prog, file=sys.stderr)
			sys.exit(1)
	# must be root
	if uid != 0:
		print('requires root access.', file=sys.stderr)
		sys.exit(1)

	# ensure we have fakeroot enabled
	if USE_FAKEROOT != 'y':
		print("error: fakeroot is disabled in /etc/makepkg.conf\n" \
			"Refusing to proceed.")
		sys.exit(1)

	# set up build user
	global builduser_uid
	global builduser_gid
	builduser_uid, builduser_gid = autils.prepare_build_user()
	# leave out prepare_work_dirs(), it should be called as needed

def savefiles(pkg, old_dir):

	failed = 0
	def abort_msg(msg):
		print('Error saving %s to %s: %s' %
			(pkg, save_dir, msg), file=sys.stderr)
		print('Aborting save...', file=sys.stderr)

	savecan = os.path.join(save_dir, pkg)

	if not os.path.isdir(save_dir):
		try:
			os.makedirs(save_dir)
			os.chmod(save_dir, 0o775)
			os.chown(save_dir, builduser_uid, builduser_uid)
		except OSError as e:
			abort_msg(str(e))
			failed = 1

	if os.path.isdir(savecan) and not failed:
		if not NOCONFIRM:
			choice = input(savecan + ': directory exists. Overwrite? [Y/n]  ').lower()

		if NOCONFIRM or choice == 'y' or choice == 'yes' or choice == '':
			try:
				rmtree(savecan)
				autils.user_copytree(old_dir, savecan, builduser_uid, builduser_gid)
			except OSError as e:
				abort_msg(str(e))
				failed = 1
	elif not os.path.isdir(savecan) and not failed:
		try:
			autils.user_copytree(old_dir, savecan, builduser_uid, builduser_gid)
		except OSError as e:
			abort_msg(str(e))

	print('Saved %s to %s' % (pkg, save_dir))

def get_editor():
	global editor
	global default_editor

	editor = os.getenv('EDITOR')

	# Prompt for editor.
	if not editor:
		print('$EDITOR not set.')
		editor = input('Please specify an editor command: ')

	# Get editor with separated args.
	editor = editor.split(' ')

	input = editor[0]

	if not autils.appcheck(input):
		# Use less to view files if no valid editor is found.
		editor = [default_editor]

		raise Exception('%s not found on system.\n'
				'Using %s as an editor.' %
				(input, default_editor))
def main():
	"""
	Do all interactive stuff.

	If there's an error, return an error code. Otherwise return zero.
	"""

	global args
	pkgs = args
	rm_packages = []

	if VERSION:
		version()
		return 0

	errno = verify_inputs()
	if errno != None:
		return errno

	if CLEAN:
		retcode = 0
		try:
			rmtree(build_dir)
		except:
			retcode = 1
			print("Nothing to clean")

		if len(pkgs) == 0:
			return retcode

	if SEARCH:
		output = autils.search(pkgs, VERBOSE, aursite)

		if not PAGER or not autils.appcheck(PAGER):
			for line in output:
				print(line, end=' ')
		else:
			pipe = os.popen(PAGER, 'w')
			try:
				for line in output:
					pipe.write(line)
				pipe.close()
			except IOError:
				# Ignore broken pipes caused by quitting PAGER
				# early.
				pass
		return 0

	init()

	if UPGRADE:
		# Set pkgs to each potential AUR candidate.
		pkgs, installed = apacman.db_tools().get_foreign()

	upgrade_ct = 0
	for pkg in pkgs:
		global working_pkg, pkg_build_dir, aur_tarfile
		working_pkg = pkg
		pkg_build_dir = os.path.join(build_dir, working_pkg)
		prepare_work_dirs()

		# Set potential pkg work directory (after decompression).
		pkg_work_dir = os.path.join(pkg_build_dir, working_pkg)

		# Retrieve build files and prepare to build.
		aur_tarfile = None

		aurpkg = None
		if not (LOCAL or OFFICIAL) or UPGRADE:
			try:
				aurpkg = aaurparse.pkg_info(pkg, aursite)
			except Exception as e:
				print(str(e), file=sys.stderr)
				upgrade_ct += 1
				continue

		# for --upgrade. compare versions and confirm upgrade with user
		if aurpkg and UPGRADE:

			# Get aur package's info
			aurpkgver = aurpkg['Version']
			package = aurpkg['Name']

			result = avercmp.vercmp().vercmp(aurpkgver, installed[upgrade_ct])

			if result == 1:
				print('\tTarget: %s-%s' % (package, aurpkgver))
				if not NOCONFIRM:
					choice = input('\tProceed with upgrade?  [Y/n] ').lower()
					print('')
					if choice != 'y' and choice != 'yes' and choice != '':
						cleanup()
						upgrade_ct += 1
						continue
			elif result == 0:
				status = ' up to date'
				argline = '%s %s ' % (pkg, installed[upgrade_ct])
				rjust_spaces = 80 - (int(len(argline)))
				print(argline + status.rjust(rjust_spaces, '.'))
				cleanup()
				upgrade_ct += 1
				continue
			elif result == -1:
				print(':: local/%s %s seems newer than unsupported/%s %s' % (
					pkg, installed[upgrade_ct], pkg, aurpkgver))
				cleanup()
				upgrade_ct += 1
				continue

		if aurpkg == None:
			# Look for package in ABS or local save paths.

			pkgbuild_root = save_dir
			if LOCAL or UPGRADE:
				pkgbuild_root = save_dir
			if OFFICIAL:
				pkgbuild_root = OFFICIAL_PATH

			results = afind.find_dir(pkgbuild_root, pkg)

			if results == None:

				# Check ABS path for PKGBUILDs as a last resort.
				# If ABS_ROOT doesn't exist don't do this section.
				if not (LOCAL or UPGRADE):
					pkgbuild_root = OFFICIAL_PATH
					try:
						results = afind.find_dir(pkgbuild_root, pkg)
					except Exception as e:
						print(str(e), file=sys.stderr)
				# End section.

				if UPGRADE:
					upgrade_ct += 1

				if results == None:
					print('%s not found under %s' % (pkg, pkgbuild_root), file=sys.stderr)
					continue

			# Select one PKGBUILD first. Make this interactive.
			selection = 0
			r = results[selection]

			# Check if there is a PKGBUILD in the directory.
			j = os.path.join(r, 'PKGBUILD')
			if os.path.isfile(j):

				# Check if the PKGBUILD's $pkgname matches the pkg we want.
				# We really don't want to source the PKGBUILD before the
				# user has a chance to look at it. Find a safer way.

				#try:
				#	_pkgname = autils.echo_bash_vars(j, '${pkgname}')
				#except Exception, e:
				#	print('PKGBUILD syntax error: ' + str(e), sys.stderr)
				#	cleanup()
				#	upgrade_ct += 1
				#	continue

				#if _pkgname == pkg:
				results = r

			copytree(results, pkg_work_dir)
			os.chown(pkg_work_dir, builduser_uid, builduser_uid)
			os.chmod(pkg_work_dir, 0o775)

		else:
			try:
				# Try to get a tarball from AUR.
				aur_tarfile = get_tarball(pkg)
				if aur_tarfile:
					extract(aur_tarfile)
				else:
					continue
			except Exception as e:
				print(str(e), file=sys.stderr)
				upgrade_ct += 1
				continue

		try:
			work_dir = autils.get_pkgbuild_path(pkg_work_dir)
		except Exception as e:
			print(str(e), file=sys.stderr)
			return 1

		os.chdir(work_dir)

		# Save files.
		if SAVE:
			savefiles(pkg, work_dir)

			# If --save is the only opt specified don't build or
			# sync. It's OK to exit here because --upgrade (which
			# follows) requires -b or -s
			if not (BUILDDEPS or SYNCDEPS):
				if pkg == args[len(args)-1]:
					return 0
				else:
					continue

		# Go to menu if needed.
		if not AUTO_BUILD:
			select = menu(os.listdir(work_dir), pkg)
			if select == 'n':
				cleanup()
				upgrade_ct += 1
				continue
			if select == 's':
				savefiles(pkg, work_dir)

		# get dependencies
		try:
			mdep_cans, dep_cans = autils.get_depends(work_dir + '/PKGBUILD', 'makedepends', 'depends')
		except Exception as e:
			print(str(e), file=sys.stderr)
			return 1

		mdeps = []
		deps = []
		print(color('==> ', 'blue') + color('Checking Buildtime Dependencies... \n', 'black'))
		if mdep_cans != ['']:
			for mdep_can in mdep_cans:
				try:
					mdeps = filter_deps(mdep_can, fd_ct=1, type='[M]')
				except Exception as e:
					print(str(e), file=sys.stderr)
					return 1

			# reset globals for deps
			global filtered, db_pkgs, db_paths
			filtered = []
			db_pkgs = []
			db_paths = []

		print(color('==> ','blue') + color('Checking Runtime Dependencies... \n', 'black'))

		if dep_cans != ['']:
			for dep_can in dep_cans:
				try:
					deps = filter_deps(dep_can, fd_ct=1, type='[D]')
				except Exception as e:
					print(str(e), file=sys.stderr)
					return 1

		# reset again for next loop of args
		filtered = []
		db_pkgs = []
		db_paths = []

		# Install missing dependencies.
		remove_packages = []
		zct = 0
		zdict = {1: '\nMake Dependency', 2: '\nDependency'}
		for deps_type in mdeps, deps:
			zct += 1
			if deps_type != []:
				print(zdict[zct] + ' Targets: ', end=' ')
				for v in deps_type: print(v, end=' ')
				if not NOCONFIRM:
					dep_choice = input('\nProceed?  [Y/n] ').lower()
				else:
					print('\n')
					dep_choice = 'y'
				if dep_choice == 'y' or dep_choice == 'yes' or dep_choice == '':
					if BUILDDEPS:
						try:
							builddeps(deps_type)
						except Exception as e:
							print(str(e), file=sys.stderr)
							return 1
					elif SYNCDEPS:
						try:
							apacman.syncdeps(deps_type)
						except Exception as e:
							print(str(e), file=sys.stderr)
							return 1
					if RM_MDEPS:
						if 'make' in zdict[zct].lower():
							rm_packages.extend(deps_type)
				else:
					print('Unresolved dependencies. Exiting.', file=sys.stderr)
					return 1

		pkgname = makepkgf(pkg)
		if not NOINSTALL:
			try:
				install(pkgname)
			except Exception as e:
				print(str(e), file=sys.stderr)
				return 1

		upgrade_ct += 1
		cleanup()

	# Check for make deps that need to be removed.
	if RM_MDEPS and len(rm_packages) > 0:
		print('\nRemove Targets: ', end=' ')
		for rp in rm_packages: print(rp, end=' ')
		if not NOCONFIRM:
			choice = input('\nProceed?  [Y/n] ').lower()
			print('')
		else:
			print('\n')
			choice = 'y'
		if choice == 'y' or choice == 'yes' or choice == '':
			p_cmd = ['pacman', '-R', '--noconfirm']
			p_cmd.extend(rm_packages)
			retcode = Popen(p_cmd).wait()
	cleanup()
	return 0

if __name__ == '__main__':
	try:
		val = main()
		sys.exit(val)
	except SystemExit as e:
		if str(e) != '3':
			cleanup()
		sys.exit(e)
	# print pacman specific errors, users will understand these.
	except (apacman.DatabaseError, apacman.ConfigError) as e:
		print(str(e), file=sys.stderr)
		cleanup()
		sys.exit(1)
	# raise everything else not accounted for. These are problems.
	except:
		cleanup()
		raise
